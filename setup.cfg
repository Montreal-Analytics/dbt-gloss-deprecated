[metadata]
name = pre_commit_hooks
version = 1.0.0
description = Collection of [pre-commit](https://pre-commit.com) hooks to ensure the quality of your [dbt](https://www.getdbt.com) projects.
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/Montreal-Analytics/dbt-gloss
author = Montreal Analytics
author_email = hello@montrealanalytics.com
license = MIT
license_file = LICENSE
classifiers =
    License :: OSI Approved :: MIT License
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: Implementation :: PyPy

[options]
packages = find:
install_requires =
    pyyaml
python_requires = >=3.7.1

[options.entry_points]
console_scripts =
    check-column-desc-are-same = dbt_gloss.check_column_desc_are_same:main
    check-column-name-contract = dbt_gloss.check_column_name_contract:main
    check-id-column-is-named = dbt_gloss.check_id_column_is_named:main
    check-macro-has-description = dbt_gloss.check_macro_has_description:main
    check-macro-arguments-have-desc = dbt_gloss.check_macro_arguments_have_desc:main
    check-model-columns-have-desc = dbt_gloss.check_model_columns_have_desc:main
    check-model-has-all-columns = dbt_gloss.check_model_has_all_columns:main
    check-model-has-description = dbt_gloss.check_model_has_description:main
    check-model-has-meta-keys = dbt_gloss.check_model_has_meta_keys:main
    check-model-has-properties-file = dbt_gloss.check_model_has_properties_file:main
    check-model-has-tests-by-name = dbt_gloss.check_model_has_tests_by_name:main
    check-model-has-tests-by-type = dbt_gloss.check_model_has_tests_by_type:main
    check-model-has-tests-by-group = dbt_gloss.check_model_has_tests_by_group:main
    check-model-has-tests = dbt_gloss.check_model_has_tests:main
    check-model-name-contract = dbt_gloss.check_model_name_contract:main
    check-model-parents-and-childs = dbt_gloss.check_model_parents_and_childs:main
    check-model-parents-database = dbt_gloss.check_model_parents_database:main
    check-model-parents-schema = dbt_gloss.check_model_parents_schema:main
    check-model-tags = dbt_gloss.check_model_tags:main
    check-script-has-no-table-name = dbt_gloss.check_script_has_no_table_name:main
    check-script-ref-and-source = dbt_gloss.check_script_ref_and_source:main
    check-script-semicolon = dbt_gloss.check_script_semicolon:main
    check-source-childs = dbt_gloss.check_source_childs:main
    check-source-columns-have-desc = dbt_gloss.check_source_columns_have_desc:main
    check-source-has-all-columns = dbt_gloss.check_source_has_all_columns:main
    check-source-table-has-description = dbt_gloss.check_source_table_has_description:main
    check-source-has-freshness = dbt_gloss.check_source_has_freshness:main
    check-source-has-loader = dbt_gloss.check_source_has_loader:main
    check-source-has-meta-keys = dbt_gloss.check_source_has_meta_keys:main
    check-source-has-tests-by-name = dbt_gloss.check_source_has_tests_by_name:main
    check-source-has-tests-by-type = dbt_gloss.check_source_has_tests_by_type:main
    check-source-has-tests = dbt_gloss.check_source_has_tests:main
    check-source-tags = dbt_gloss.check_source_tags:main
    dbt-clean = dbt_gloss.dbt_clean:main
    dbt-compile = dbt_gloss.dbt_compile:main
    dbt-deps = dbt_gloss.dbt_deps:main
    dbt-docs-generate = dbt_gloss.dbt_docs_generate:main
    dbt-run = dbt_gloss.dbt_run:main
    dbt-test = dbt_gloss.dbt_test:main
    generate-missing-sources = dbt_gloss.generate_missing_sources:main
    generate-model-properties-file = dbt_gloss.generate_model_properties_file:main
    unify-column-description = dbt_gloss.unify_column_description:main
    replace-script-table-names = dbt_gloss.replace_script_table_names:main
    remove-script-semicolon = dbt_gloss.remove_script_semicolon:main

[bdist_wheel]
universal = 1

[options.packages.find]
exclude = tests*

[tool:pytest]
testpaths = tests

[coverage:run]
branch = True
source = .
omit =
    */.tox/*
    */__main__.py
    */setup.py
    */venv*/*
    tests/*

[coverage:report]
fail_under = 100
show_missing = True
skip_covered = True
skip_empty = True
exclude_lines =
    pragma: no cover
    if __name__ == .__main__.:

[mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_no_return = false

[mypy-tests.*]
disallow_untyped_defs = false

[flake8]
ignore = BLK100,E231,W503
statistics = 1
max-line-length = 88

[mutmut]
runner = python -m pytest -x
tests_dir = tests/unit
